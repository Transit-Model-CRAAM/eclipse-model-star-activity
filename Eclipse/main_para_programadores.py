'''
main programado para profissionais e estudantes familiarizados com a √°rea 
'''

import numpy as np
from matplotlib import pyplot
from Star.Estrela import Estrela
from Planet.Eclipse import Eclipse
from Misc.Verify  import Validar,calSemiEixo,calculaLat
from Planet.Planeta import Planeta
from Planet.Moon import Moon

''''
--- ‚≠êÔ∏è Estrela ---
par√¢metro raio:: raio da estrela em pixel
par√¢metro intensidadeMaxima:: intensidade da estrela que sera plotada 
par√¢metro tamanhoMatriz:: tamanho em pixels da matriz estrela
par√¢metro raioStar:: raio da estrela em rela√ß√£o ao raio do sol
par√¢metro coeficienteHum:: coeficiente de escurecimento de limbo 1 (u1)p
par√¢metro coeficienteDois:: coeficiente de escurecimento de limbo 2 (u2)
objeto estrela_ :: √© o objeto estrela 
estrela s√£o feitas atrav√©s dele.
par√¢metro estrela_matriz :: variavel que recebe a matriz da estrela
'''

raio_estrela_pixel = 373. #default (pixel)
intensidadeMaxima = 240 #default
tamanhoMatriz = 856 #default
raioSun = 0.805 #raio da estrela em relacao ao raio do sol
raioStar = raioSun*696340 #multiplicando pelo raio solar em Km 
coeficienteHum = 0.377
coeficienteDois = 0.024

# cria estrela
estrela_ = Estrela(raio_estrela_pixel,raioSun,intensidadeMaxima,coeficienteHum,coeficienteDois,tamanhoMatriz)

Nx = estrela_.getNx() #Nx e Ny necessarios para a plotagem do eclipse
Ny = estrela_.getNy()
dtor = np.pi/180.  

'''
--- ü™ê Planeta ---
par√¢metro periodo:: periodo de √≥rbita do planeta em dias 
par√¢metro anguloInclinacao:: √¢ngulo de inclina√ß√£o do planeta em graus
par√¢metro semieixoorbital:: semi-eixo orbital do planeta
par√¢metro semiEixoRaioStar:: convers√£o do semi-eixo orbital em rela√ß√£o ao raio da estrela 
par√¢metro raioPlanetaRstar:: convers√£o do raio do planeta em rela√ß√£o ao raio de J√∫piter para em rela√ß√£o ao raio da estrela
'''
periodo = 2.219 # em dias
anguloInclinacao = 85.51  # em graus
ecc = 0
anom = 0 
raioPlanJup = 1.138 #em rela√ß√£o ao raio de jupiter
semiEixoUA = 0.031
massPlaneta = 0.002 #em relacao ao R de jupiter

# cria planeta
planeta_ = Planeta(semiEixoUA, raioPlanJup, periodo, anguloInclinacao, ecc, anom, estrela_.getRaioSun(), massPlaneta)

dec = int(input("Deseja calular o semieixo Orbital do planeta atrav√©s da 3a LEI DE KEPLER? 1. Sim 2.N√£o | "))
if dec==1:
    mass = 0. #colocar massa da estrela em rela√ß√£o a massa do sol
    semieixoorbital = calSemiEixo(periodo,mass)
    semiEixoRaioStar = ((semieixoorbital/1000)/raioStar)
    #transforma em km para fazer em rela√ß√£o ao raio da estrela
else:
    #semiEixoUA = Validar('Semi eixo (em UA:)') #descomentar essa linha caso queira adicionar o valor em runtime
    semiEixoUA = 0.028 # Adicionar apenas valores maiores que 0 

    # em unidades de Rstar
    semiEixoRaioStar = ((1.469*(10**8))*semiEixoUA)/raioStar
    #multiplicando pelas UA (transformando em Km) e convertendo em relacao ao raio da estrela 

'''
--- üåñ Eclipse ---
par√¢metro eclipse:: variavel que guarda o objeto da classe eclipse que gera a curva de luz. Chamadas das fun√ß√µes da classe 
Eclipse () s√£o feitas atrav√©s dele. 
par√¢metro tempoTransito:: tempo do transito do planeta 
par√¢metro curvaLuz:: matriz curva de luz que sera plotada em forma de grafico 
par√¢metro tempoHoras:: tempo do transito em horas
'''
estrela_matriz = estrela_.getMatrizEstrela()
eclipse_ = Eclipse(Nx,Ny,raio_estrela_pixel, estrela_, planeta_)

tempoHoras = 1
eclipse_.geraTempoHoras(tempoHoras)
eclipse_.criarEclipse(False, anim=True)

print ("Tempo Total (Tr√¢nsito):", eclipse_.getTempoTransito()) 
tempoTransito = eclipse_.getTempoTransito()
curvaLuz = eclipse_.getCurvaLuz()
tempoHoras = eclipse_.getTempoHoras()

#Plotagem da curva de luz 
pyplot.plot(tempoHoras, curvaLuz)
pyplot.axis([-tempoTransito/2, tempoTransito/2, min(curvaLuz)-0.001, 1.001])                       
pyplot.show()

#### Adicionando interfer√™ncias na curva de luz #### 
latsugerida = eclipse_.calculaLatMancha()
print("A latitude sugerida para que a mancha influencie na curva de luz da estrela √©: ", latsugerida)


'''
---  üéØ Mancha --- 
par√¢metro latsugerida:: latitude sugerida para a mancha
par√¢metro quantidade:: variavel que armazena a quantidade de manchas
par√¢metro raio_mancha:: raio da mancha em rela√ß√£o ao raio da estrela
par√¢metro intensidade:: intensidade da mancha em rela√ß√£o a intensidade da estrela
par√¢metro latitude:: latitude da mancha 
par√¢metro longitude:: longitude da mancha 
par√¢metro raioMancha:: raio real da mancha
par√¢metro area::  area da mancha 
'''
count = 0
quantidade = 1 #quantidade de manchas desejadas, se quiser acrescentar, mude essa variavel

while count!=quantidade: #o la√ßo ira rodar a quantidade de manchas selecionada pelo usuario
    print('\033[1;35m\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê Par√¢metros da mancha ',count+1,'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n\033[m')
    raio_mancha = Validar('Digite o raio da mancha em fun√ß√£o do raio da estrela em pixels:')   
    intensidade = float(input('Digite a intensidade da mancha em fun√ß√£o da intensidade m√°xima da estrela:'))
    latitude = float(input('Latitude da mancha:'))
    longitude = float(input('Longitude da mancha:'))

    mancha = Estrela.Mancha(intensidade, raio_mancha, latitude, longitude)

    raioMancha = raio_mancha*raioStar
    area = np.pi *(raioMancha**2)
    mancha.area = area

    estrela_.addMancha(mancha)
    estrela_.criaEstrelaManchada()
    count+=1

estrela_matriz = estrela_.getMatrizEstrela()

# para plotar a estrela manchada
plota_manchada = True # caso nao queira plotar a estrela manchada, mudar para False
if (quantidade>0 and plota_manchada): #se manchas foram adicionadas. plotar
    eclipse_.setEstrela(estrela_matriz)

    estrela_.Plotar(tamanhoMatriz, estrela_matriz)
    eclipse_.criarEclipse(False, anim=True)

    tempoTransito = eclipse_.getTempoTransito()
    curvaLuz = eclipse_.getCurvaLuz()
    tempoHoras = eclipse_.getTempoHoras()

    #Plotagem da curva de luz 
    pyplot.plot(tempoHoras,curvaLuz)
    pyplot.axis([-tempoTransito/2,tempoTransito/2,min(curvaLuz)-0.001,1.001])                       
    pyplot.show()

'''
---  üåô Lua --- 
par√¢metro rmoon:: raio da lua em relacao ao raio da Terra
par√¢metro mass:: em relacao a massa da Terra
par√¢metro perLua:: periodo da lua em dias 
'''
addMoon = False #mudar para True se quiser adicionar 
if addMoon: 
    rmoon = 50 
    mass = 0.5 
    perLua = 0.03 

    moon = Moon(rmoon, mass, perLua, tempoHoras, planeta_.anguloInclinacao, planeta_.mass, estrela_.raio, planeta_.getRaioPlanPixel(estrela_.raio, estrela_.raioSun), estrela_.getRaioSun(), planeta_.periodo)
    eclipse_.criarLua(moon) #adiciona lua no planeta que esta no eclipse

    moon.setMoonName("Moon name")
    estrela_.Plotar(tamanhoMatriz, estrela_matriz)
    eclipse_.criarEclipse(False, anim=True)

    # Criando planeta com lua 
    estrela_matriz = estrela_.getMatrizEstrela()

    # Passa para o eclipse a estrela atualizada
    eclipse_.setEstrela(estrela_matriz)

    # An√°lise final 
    print ("Tempo Total (Tr√¢nsito):",eclipse_.getTempoTransito()) 
    tempoTransito = eclipse_.getTempoTransito()
    curvaLuz = eclipse_.getCurvaLuz()
    tempoHoras = eclipse_.getTempoHoras()

    #Plotagem da curva de luz 
    pyplot.plot(tempoHoras,curvaLuz)
    pyplot.axis([-tempoTransito/2,tempoTransito/2,min(curvaLuz)-0.001,1.001])                       
    pyplot.show()